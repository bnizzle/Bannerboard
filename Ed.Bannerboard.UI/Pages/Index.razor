@page "/"
@using System.Net.WebSockets
@using System.Text
@using System.Threading
@using System.IO
@using Ed.Bannerboard.UI.Logic
@implements IDisposable

@if (webSocket.State == WebSocketState.Open)
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-sm col-xs-12 mt-4">
                <KingdomStrength @ref="kingdomStrength" />
            </div>
            <div class="col-sm col-xs-12 mt-4">
                <KingdomLords @ref="kingdomLords" />
            </div>
        </div>
    </div>
}
else
{
    <h3>Connection: @webSocket.State</h3>
}

@code {
    private CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    private ClientWebSocket webSocket = new ClientWebSocket();

    // TODO: Dynamically render and update the widgets from a list when Blazor supports it
    private KingdomStrength kingdomStrength;
    private KingdomLords kingdomLords;

    /// <summary>
    /// Component initialization logic.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // TODO: Inform which widgets and versions the dashboard supports
        await webSocket.ConnectAsync(new Uri("ws://localhost:2020"), disposalTokenSource.Token); // TODO: Change the port or use an URL?
        _ = ReceiveLoop();
    }

    /// <summary>
    /// WebSocket message reception loop.
    /// </summary>
    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[2048]);
        do
        {
            WebSocketReceiveResult result;
            using (var ms = new MemoryStream())
            {
                do
                {
                    result = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
                    ms.Write(buffer.Array, buffer.Offset, result.Count);
                } while (!result.EndOfMessage);

                if (result.MessageType == WebSocketMessageType.Close)
                {
                    break;
                }

                ms.Seek(0, SeekOrigin.Begin);
                using (var reader = new StreamReader(ms, Encoding.UTF8))
                {
                    Console.WriteLine(await reader.ReadToEndAsync());
                }
            }

            // Deserialize model
            var receivedObject = buffer.Array.ToObject();

            // Send model to widgets
            await kingdomStrength.Update(receivedObject);
            await kingdomLords.Update(receivedObject);
        } while (!disposalTokenSource.IsCancellationRequested);
    }

    /// <summary>
    /// Disposal logic.
    /// </summary>
    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bannerboard client stopped", CancellationToken.None);
    }
}
