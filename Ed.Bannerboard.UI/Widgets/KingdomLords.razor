@inherits WidgetBase
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<div class="card">
    <div class="card-header">
        <div class="d-flex">
            <div class="align-self-center">Lords</div>
            @if (lordsModel != null)
            {
                <div class="dropdown ml-auto">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="filterMenu" data-toggle="dropdown" data-display="static" aria-expanded="false" title="Filters">
                        <i class="fas fa-filter"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterMenu">
                        <form>
                            @foreach (var kingdom in lordsModel.Kingdoms)
                            {
                                <div class="form-check dropdown-item">
                                    <input class="form-check-input" type="checkbox" id="lords-widget-@kingdom.Name" checked="@visibleKingdoms.Contains(kingdom.Name)" @onchange="async e => await KingdomFilterClickedAsync(kingdom)">
                                    <label class="form-check-label d-block" for="lords-widget-@kingdom.Name">@kingdom.Name</label>
                                </div>
                            }
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="card-body">
        <div class="@(lordsModel== null ? "d-none" : "")">
            <BarChart @ref="barChart" TItem="int" OptionsObject="BaseBarChartOptions" />
        </div>

        @if (lordsModel == null)
        {
            <span>No data or incompatible mod version.</span>
        }
    </div>
</div>

@code {
    private readonly Version _minimumSupportedVersion = new Version("0.2.0");
    private BarChart<int> barChart;
    private KingdomLordsModel lordsModel;
    private List<string> visibleKingdoms;

    public override bool CanUpdate(object model, Version version)
    {
        return IsCompatible(version, _minimumSupportedVersion) && model is KingdomLordsModel;
    }

    public override async Task Update(object model)
    {
        lordsModel = model as KingdomLordsModel;
        if (visibleKingdoms == null)
        {
            visibleKingdoms = lordsModel.Kingdoms.Select(k => k.Name).ToList();
        }

        StateHasChanged();
        await HandleRedraw(lordsModel);
    }

    protected override async Task OnInitializedAsync()
    {
        visibleKingdoms = await _localStorage.GetItemAsync<List<string>>("lords-widget-visible-kingdoms");
        await base.OnInitializedAsync();
    }

    private async Task HandleRedraw(KingdomLordsModel model)
    {
        await barChart.Clear();
        var filteredKingdoms = model.Kingdoms.Where(k => visibleKingdoms.Contains(k.Name)).ToList();
        await barChart.AddLabelsDatasetsAndUpdate(GetLabels(filteredKingdoms), GetDataset(filteredKingdoms));
    }

    private async Task KingdomFilterClickedAsync(KingdomLordsItem kingdom)
    {
        if (visibleKingdoms.Contains(kingdom.Name))
        {
            visibleKingdoms.Remove(kingdom.Name);
        }
        else
        {
            visibleKingdoms.Add(kingdom.Name);
        }

        await _localStorage.SetItemAsync("lords-widget-visible-kingdoms", visibleKingdoms);
        await HandleRedraw(lordsModel);
    }

    private List<string> GetLabels(List<KingdomLordsItem> kingdoms) =>
        kingdoms.Select(m => m.Name).ToList();

    private BarChartDataset<int> GetDataset(List<KingdomLordsItem> kingdoms) =>
        new BarChartDataset<int>
            {
                Data = kingdoms.Select(m => m.Lords).ToList(),
                BackgroundColor = kingdoms.Select(m => m.PrimaryColor).ToList(),
                BorderColor = kingdoms.Select(m => m.SecondaryColor).ToList(),
            };
}
