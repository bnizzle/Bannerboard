@inherits WidgetBase
@inject Blazored.LocalStorage.ILocalStorageService _localStorage

<div class="card">
    <div class="card-header">
        <div class="d-flex">
            <div class="align-self-center">Wars</div>
            @if (warsModel != null)
            {
                <div class="dropdown ml-auto">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="filterMenu" data-toggle="dropdown" data-display="static" aria-expanded="false" title="Filters">
                        <i class="fas fa-filter"></i>
                    </button>
                    <div class="dropdown-menu dropdown-menu-right" aria-labelledby="filterMenu">
                        <form>
                            <div class="form-check dropdown-item">
                                <input class="form-check-input" type="checkbox" id="factionFilterCheck" checked="@showMinorFactions" @onchange="async e => await MinorFactionFilterClickedAsync(e)">
                                <label class="form-check-label" for="factionFilterCheck">
                                    Show minor factions
                                </label>
                            </div>
                            <div class="dropdown-divider"></div>
                            @foreach (var kingdom in warsModel.Kingdoms)
                            {
                                <div class="form-check dropdown-item">
                                    <input class="form-check-input" type="checkbox" id="wars-widget-@kingdom.Name" checked="@visibleKingdoms.Contains(kingdom.Name)" @onchange="async e => await KingdomFilterClickedAsync(kingdom)">
                                    <label class="form-check-label" for="wars-widget-@kingdom.Name">@kingdom.Name</label>
                                </div>
                            }
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
    <div class="card-body">
        @if (warsModel != null)
        {
            <table class="table table-sm table-wars">
                <tbody>
                    @foreach (var kingdom in warsModel.Kingdoms.Where(k => visibleKingdoms.Contains(k.Name) && k.Wars.Any(w => w.IsKingdomFaction || w.IsMinorFaction && showMinorFactions)))
                    {
                        <tr style="background-color: @kingdom.PrimaryColor;">
                            <td class="text-center">@kingdom.Name</td>
                            <td><img src="img/swords.png" alt="Kingdom is at war with" class="img-war" /></td>
                            <td>@string.Join(", ", kingdom.Wars.Where(w => w.IsKingdomFaction || w.IsMinorFaction && showMinorFactions).Select(w => w.Name))</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <span>No data or incompatible mod version.</span>
        }
    </div>
</div>

@code {
    private readonly Version _minimumSupportedVersion = new Version("0.2.1");
    private KingdomWarsModel warsModel;
    private bool showMinorFactions;
    private List<string> visibleKingdoms;

    public override bool CanUpdate(object model, Version version)
    {
        return IsCompatible(version, _minimumSupportedVersion) && model is KingdomWarsModel;
    }

    public override Task Update(object model)
    {
        warsModel = model as KingdomWarsModel;
        if (visibleKingdoms == null)
        {
            visibleKingdoms = warsModel.Kingdoms.Select(k => k.Name).ToList();
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        showMinorFactions = await _localStorage.GetItemAsync<bool>("wars-widget-show-minor-factions");
        visibleKingdoms = await _localStorage.GetItemAsync<List<string>>("wars-widget-visible-kingdoms");
        await base.OnInitializedAsync();
    }

    private async Task MinorFactionFilterClickedAsync(ChangeEventArgs e)
    {
        showMinorFactions = (bool)e.Value;
        await _localStorage.SetItemAsync("wars-widget-show-minor-factions", showMinorFactions);
    }

    private async Task KingdomFilterClickedAsync(KingdomWarsItem kingdom)
    {
        if (visibleKingdoms.Contains(kingdom.Name))
        {
            visibleKingdoms.Remove(kingdom.Name);
        }
        else
        {
            visibleKingdoms.Add(kingdom.Name);
        }

        await _localStorage.SetItemAsync("wars-widget-visible-kingdoms", visibleKingdoms);
    }
}
